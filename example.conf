# Configuration files are TOML files 

[service]
# A directory containing a set of ".m3u8" files. shuffled will load each m3u8
# file in this directory will be loaded and used as a playlist.
#
# Note that these m3u8 files *must not* contain comments or other extended
# features. Each line must contain the absolute path of one audio file with no
# trailing or initial whitespace:
playlist_dir = "/usr/share/music/playlists"

# The Unix domain socket that shuffled will create and use to listen for IPC
# requests.
ipc_socket = "/tmp/shuffled.socket"

# A list of special services that shuffled should provide in addition to just
# playing audio. It can be any subset of this list. Note that the clock and
# weather assume that you are using MP3 files (streams serving OGG or other
# formats will not be able to use them)
#
# - Enabling clock will make shuffled periodically play a notice which announces
#   the current time. In order to use this functionality you must have the
#   following utilities installed and available on your path:
#
#   - espeak
#   - sox
#   - lame
#   - eyeD3
#
# - Enabling weather will make shuffled periodically check the US National Weather
#   Service API, and read back the hourly forecast that it receives. It requires the
#   same tools as the clock service.
#
# - Enabling watchdog will make shuffled check an Icecast service to see if it is
#   active, and if not it will start a systemd service. Note that the Icecast service
#   must be running over plain HTTP; HTTPS is not currently supported.
#
tasks = ["clock", "weather", "watchdog"]

[special]
# The directory used to store MP3 and WAV files for the clock and weather
# services. It must exist and be writable by the user running shuffled.
working_dir = "/tmp/shuffled.dir"

# How many minutes to wait between play special entries, if any are enabled.
# This works in a round-robin fashion so that if both clock and weather are
# enabled, then clock will be played at time t, weather at time t + 30, then
# clock again at t + 60, etc.
interval_min = 30

[watchdog]
# How often to probe the Icecast service to see if it is running.
interval_min = 5

# The name of the systemd service to start if the Icecast services does not
# respond.
service = "ezstream.service"

# The URL to check when determining if the stream is active.
url = "http://my.stream.com:8182/stream.mp3"

[weather]
# The NWS gridpoint to fetch the forecast for, in the form "{CWA}/{GRIDX},{GRIDY}".
# You can use the API explorer to determine what your gridpiont is:
#
# https://www.weather.gov/documentation/services-web-api#/default/get_points__point_
#
# In the GET /points/{point} section, type in the latitude and longitude and then
# execute. In the response you should see a three-letter CWA code as well as a gridX
# and a gridY for the point you selected.
region = "RAH/58,60"

# How many hours worth of forecast to read. The NWS API often returns days
# worth of forecasts at a time in increments of a few hours each. You can have
# it read anything from a few hours to a whole day or two.
duration_hr = 8

# How often to request a new forecast. This should usually be a few hours less than
# the duration, since the NWS API can sometimes fail. If this happens shuffled will
# start polling it every hour until it returns a forecast. 
interval_hr = 6
